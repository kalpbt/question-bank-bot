{
  "chapter_name": "2: Application Layer",
  "pages": [
    {
      "page_number": "1",
      "content": "eo\nDarshan 2 - Application Layer\n\nNetwork Applications OR\n\nPrinciples of Network Applications\n\ne A Network application is an application running on one host and _ provides\ncommunication to another application running on a different host.\n\ne At the core of network application development is writing programs that run on\ndifferent end systems and communicate with each other over the network.\n\ne In the Web application, there are two distinct programs that communicate with each\nother: the browser program running in the user's host; and the Web server program\nrunning in the Web server host.\n\ne Examples of network applications are\n\ne-mail\n\nweb\n\ntext messaging\n\nremote login\n\nP2P file sharing\n\nmulti-user network games\nstreaming stored video (YouTube)\nvoice over IP (e.g., Skype)\nreal-time video conferencing\nsocial networking\n\nNetwork Application Architectures\n\nNetwork Application Architectures\n\ne There are two possible structure of applications\n1. Client-Server architecture\n2. P2P (Peer to Peer) architecture\n\nClient-Server architecture\n\ne Ina client-server architecture, there is an always-on host, called the server, which provides\nservices requested from many other hosts, called clients.\n\ne Aclassic example is the Web application for which an always-on Web server services requests\nfrom browsers running on client hosts. When a Web server receives a request for an object from\na client host, it responds by sending the requested object to the client host.\n\ne Note that with the client-server architecture, clients do not directly communicate with each\nother; for example, in the Web application, two browsers do not directly communicate with\neach other.\n\ne Another characteristic of the client-server architecture is that the server has a fixed, well-known\naddress, called an IP address. Because the server is always on, a client can always contact the\nserver by sending a packet to the server’s IP address.\n\ne Some of the better-known applications with client-server architecture include the Web, FTP,\nTelnet, and e-mail.\n\nP2P architecture\ne In P2P architecture, there is no dedicated server.\ne Pairs of hosts, called peers communicate directly with each other.\n\nVVVVVVVVV V\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 1\n"
    },
    {
      "page_number": "2",
      "content": "D Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\nBecause the peers communicate without passing through a dedicated server, the architecture is\ncalled peer-to-peer.\nMany of today’s most popular and traffic-intensive applications are based on P2P architectures.\n\nClient-Server architecture P2P (Peer to Peer) architecture\n\nProcesses Communicating\nProcess\n\nA process is an instance of a program running on a computer or we can say that process is a\nprogram under execution.\n\nWhen processes are running on the same end system, they can communicate with each other\nwith interprocess communication, using rules that are governed by the end system’s operating\nsystem.\n\nProcesses on two different end systems communicate with each other by exchanging messages\nacross the computer network.\n\nA sending process creates and sends messages into the network; a receiving process receives\nthese messages and possibly responds by sending messages back.\n\nIn the context of a communication session between a pair of processes, the process that\ninitiates the communication is called the client. The process that waits to be contacted to begin\nthe session is the server.\n\nThe client is a process (program) that sends a message to a server process (program), requesting\nthat the server perform a task (service).\n\nA server is a process (program) that fulfills the client request by performing the task requested\nby the client. Server programs generally receive requests from client programs, execute it and\ndispatch responses to client requests.\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 2\n"
    },
    {
      "page_number": "3",
      "content": "(D Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\nAn interface between the Process and the Computer Network\nOR Socket\n\ne Any message sent from one process to another must go through the underlying network.\n\ne A process sends messages into and receives messages from, the network through a software\ninterface called a socket.\n\ne Aprocess is similar to a house and its socket is similar to its door. When a process wants to send\na message to another process on another host, it shoves (passes) the message out its door\n(socket). This sending process assumes that there is a transportation infrastructure on the other\nside of its door that will transport the message to the door of the destination process. Once the\nmessage arrives at the destination host, the message passes through the receiving process’s\ndoor (socket), and the receiving process then acts on the message.\n\nHost or Host or\nserver server\n\nControlled __ _ a a _\\— Controtted\n\nby application | Process } , Process by application\ndeveloper Xs 4 J a a we developer\n\nControlled: TCP with TcPwith 7—— Controlled\nby operating buffers, . > buffers, by operating\nsystem variables internet variables system\n\nFig. 2 Application processes, sockets, and underlying transport protoco\n\nAddressing Processes\ne To identify the receiving process, two pieces of information need to be specified:\n1. the address of the host and\n2. an identifier that specifies the receiving process in the destination host.\n\ne On the Internet, the host is identified by its IP address.\n\ne AnIP address is a 32-bit that uniquely identify the host.\n\ne In addition to knowing the address of the host to which a message is destined, the sending\nprocess must also identify the receiving process (more specifically, the receiving socket) running\nin the host.\n\ne This information is needed because in general, a host could be running many network\napplications.\n\nTransport Services available to Applications\n\nReliable Data Transfer\ne Reliable data transfer is to guarantee that the data sent by one end of the application is\ndelivered correctly and completely to the other end of the application.\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 3\n"
    },
    {
      "page_number": "4",
      "content": "Darshan\n\nInstitute of Engineering & Technology\n\n( |\n\ne If a protocol provides such a guaranteed data delivery service, it is said to provide reliable data\ntransfer.\n\ne One important service that a transport-layer protocol can potentially provide to an application is\nprocess-to-process reliable data transfer.\n\ne When a transport protocol provides this service, the sending process can just pass its data into\nthe socket and know with complete confidence that the data will arrive without errors at the\nreceiving process.\n\nThroughput\ne Throughput is the rate at which the sending process can deliver bits to the receiving process.\ne The transport protocol ensures that the available throughput is always at least r bits/sec.\nTiming\n\ne Atransport-layer protocol can also provide timing guarantees.\n\ne An example guarantee might be that every bit that the sender pumps into the socket arrives at\nthe receiver’s socket no more than 100 msec later. Such a service would be appealing to\ninteractive real-time applications, such as Internet telephony, virtual environments,\nteleconferencing, and multiplayer games, all of which require tight timing constraints on data\ndelivery in order to be effective.\n\nSecurity\n\ne Finally, a transport protocol can provide an application with one or more security services.\n\ne For example, in the sending host, a transport protocol can encrypt all data transmitted by the\nsending process, and in the receiving host, the transport-layer protocol can decrypt the data\nbefore delivering the data to the receiving process.\n\nDifference between TCP (Service) and UDP (Service)\n\n2 - Application Layer\n\nDescription TCP UDP\n\nFull Name Transmission Control Protocol User Datagram Protocol\n\nConnection TCP is a  connection-oriented | UDP is a connectionless protocol.\nprotocol.\n\nFunction A point to point connection is | A point to point connection is not\nestablished between client and | established before sending messages.\nserver before sending a message.\n\nUsage TCP is suited for applications that | UDP is suitable for applications that\nrequire high reliability, and | need a fast, efficient transmission,\ntransmission time is relatively less | such as games.\ncritical.\n\nReliability There is an absolute guarantee that | There is no guarantee that the\nthe data transferred remains intact | messages or packets sent would\nand arrives in the same order in | reach at all.\nwhich it was sent.\n\nUse by other protocols HTTP, HTTPs, FTP, SMTP, Telnet DNS, DHCP, SNMP, RIP, VOIP\n\nThe ordering of data | TCP rearranges data packets in the | UDP has no inherent order as all\n\npackets order specified. packets are independent of each\n\nother.\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 4\n\n"
    },
    {
      "page_number": "5",
      "content": "D Dars\n\nInstitute of Engineering & Technology\n\n2 - Application Layer\n\nDescription\n\nTCP\n\nUDP\n\nSpeed of transfer\n\nThe speed for TCP is slower than\nUDP.\n\nUDP is faster because there is no\nerror-checking for packets.\n\nHeader Size\n\nTCP header size is 20 bytes\n\nUDP Header size is 8 bytes.\n\nData Flow Control\n\nTCP does Flow Control.\n\nUDP does not have an option for flow\ncontrol.\n\nError Checking\n\nTCP does error checking\n\nUDP does error checking, but no\nrecovery options.\n\nAcknowledgment\n\nAcknowledgment segments\n\nNo Acknowledgment\n\nHandshake SYN, SYN-ACK, ACK No handshake\nThe Web and HTTP\nWeb\n\ne A Web page consists of objects.\n\ne An object is simply a file - such as an HTML file, a JPEG image, a Java applet, or a video clip, that\nis addressable by a single URL.\n\ne Most Web pages consist of a base HTML file and several referenced objects.\n\ne For example, if a Web page contains HTML text and five JPEG images, then the Web page has six\nobjects: the base HTML file plus the five images.\n\ne The base HTML file references the other objects in the page with the objects’ URLs.\n\ne Each URL has two components: the hostname of the server that houses the object and the\nobject’s path name.\n\ne For example, the has\n\nURL “http://www.someSchool.edu/someDepartment/picture. gif”\n\n“www.someSchool.edu” is hostname and “/someDepartment/picture.gif” is a pathname.\nHTTP (HyperText Transfer Protocol)\ne HTTP is Web’s application layer protocol which defines how Web clients request Web pages\nfrom Web servers and how servers transfer Web pages to clients.\n\nServer running\nApache Web server\n\nPC running\nInternet Explorer\n\nLinux running\nFirefox\n\nFig. 3 HTTP request-response behavior\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 5\n"
    },
    {
      "page_number": "6",
      "content": "J\n| Darshan 2 - Application Layer\n\nWhen a user requests a Web page (for example, clicks on a hyperlink), the browser sends HTTP\nrequest messages for the objects in the page to the server.\n\nThe server receives the requests and responds with HTTP response messages that contain the\nobjects.\n\nHTTP uses TCP as its underlying transport protocol.\n\nThe HTTP client first initiates a TCP connection with the server.\n\nOnce the connection is established, the browser and the server processes access TCP through\ntheir socket interfaces.\n\nHTTP follows client/server model\n\n> client: a browser that requests, receives, (using HTTP protocol) and \"displays\" Web objects\n> server: Web server sends (using HTTP protocol) objects in response to requests\n\nHTTP connection types\n\n1. Non-persistent HTTP\n\n2. Persistent HTTP\n\nNon-persistent HTTP\n\nA non-persistent connection is the one that is closed after the server sends the requested object\n\nto the client. In other words, the connection is used exactly for one request and one response.\n\nFor downloading multiple objects it required multiple connections.\n\nNon-persistent connections are the default mode for HTTP/1.0.\n\nsuppose a user enters URL: \"www.someSchool.edu/someDepartment/home.index\"\n\nAbove link contains text and references to 10 jpeg images.\n\nta. HTTP client initiates TCP\nconnection to HTTP server\n(process) at\nwww.someSchool.edu on port 80\n\nib. HTTP server at host\nwww.someSchool.edu waiting\n\nfor TCP connection at port 80.\n“accepts” connection, notifying\n2. HTTP client sends HTTP client\nrequest message (containing\nURL) into TCP connection 3. HTTP server receives request\nsocket. Message indicates message, forms response\nthat client wants object message containing requested\nsomeDepartment/home.index object, and sends message\n\n= into its socket\n\n_— 4. HTTP server closes TCP\n\nconnection.\n5. HTTP client receives response\nmessage containing html file,\ndisplays html. Parsing html\nfile, finds 10 referenced jpeg\nobjects\n\n6. Steps 1-5 repeated for each\nof 10 jpeg objects\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 6\n"
    },
    {
      "page_number": "7",
      "content": "(D Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\n6.\n\nThe HTTP client process initiates a TCP connection to the server www.someSchool.edu\non port number 80, which is the default port number for HTTP. Associated with the TCP\nconnection, there will be a socket at the client and a socket at the server.\n\nThe HTTP client sends an HTTP request message to the server via its socket. The request\nmessage includes the path name /someDepartment/home.index.\n\nThe HTTP server process receives the request message via its socket, retrieves the\nobject /someDepartment/home.index from its storage (RAM or disk), encapsulates the\nobject in an HTTP response message, and sends the response message to the client via\nits socket.\n\nThe HTTP server process tells TCP to close the TCP connection. (But TCP doesn’t actually\nterminate the connection until it knows for sure that the client has received the\nresponse message intact.).\n\nThe HTTP client receives the response message. The TCP connection terminates. The\nmessage indicates that the encapsulated object is an HTML file. The client extracts the\nfile from the response message, examines the HTML file, and finds references to the 10\nJPEG objects.\n\nThe first four steps are then repeated for each of the referenced JPEG objects.\n\ne RTT (Round Trip Time) - which is the time it takes for a small packet to travel from client to\nserver and then back to the client.\n\nInitiate TCP\nconnection\n\nRIT\n\n\\l\n\nOT\n\nRIT ae\n_—\n\n‘+ Time to transmit file\n\nEntire file received\n\nTime Time\nat client at server\n\nFig. 4 Calculation for the time needed to request and receive an HTML file\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 7\n"
    },
    {
      "page_number": "8",
      "content": "2°\nDarshan 2 - Application Layer\n\nHTTP response time:\n1. one RTT to initiate TCP connection\n2. one RTT for HTTP request and first few bytes of the HTTP response to return\n3. file transmission time\n\nNon-persistent HTTP response time = 2RTT+ file transmission time\n\nIt is overhead for each TCP connection.\n\nPersistent HTTP\n\nWith persistent connections, the server leaves the TCP connection open after sending responses\nand hence the subsequent requests and responses between the same client and server can be\nsent.\n\nThe server closes the connection only when it is not used for a certain configurable amount of\ntime.\n\nIt requires as little as one RTT for all the referenced objects\n\nWith persistent connections, the performance is improved by 20%.\n\nPersistent connections are the default mode for HTTP/1.1.\n\nHTTP message format\n\nThere are two types of HTTP messages:\n1. Request 2. Response\n\nHTTP request message\n\nAn HTTP request message is in ASCII format which means in human-readable format.\nCarriage return character\n\n. line-feed character\nrequest line\n\n(GET, POST, > GET /index.html HTTP/1. 1\\7\\h\nHEAD commands) Host: www-net.cs.umass.edu\\r\\n\nUser-Agent: Firefox/3.6.10\\r\\n\nheader Accept: text/html,application/xhtml+xml\\r\\n\n” Accept-Language: en-us,en;q=0.5\\r\\n\nlines | Accept-Encoding: gzip,deflate\\r\\n\nAccept-Charset: ISO-8859-1,utf-8 ;q=0.7\\r\\n\n\ncarriage return, Keep-Alive: 115\\r\\n\nline feed at start Connection: keep-alive\\r\\n\n—+\\r\\n\n\nof line indicates\nend of header lines\n\nFig. 5 HTTP request message\nHTTP request message consist three part\n1. Request line 2. Header line 3. Carriage return\nThe message is written in ordinary ASCII text so that your ordinary computer-literate human\nbeing can read it.\nEach line is followed by a carriage return and a line feed.\nThe last line is followed by an additional carriage return and line feed.\nThe first line of an HTTP request message is called the request line; the subsequent lines are\ncalled the header lines.\n\nMaulik Trivedi, CE Department | 2140709 — Computer Networks (CN) 8\n"
    },
    {
      "page_number": "9",
      "content": "(D Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\nThe request line has three fields: the method field, the URL field, and the HTTP version field.\n\nThe method field can take on several different values, including getting, POST, HEAD, PUT, and\nDELETE.\n\nIn this example, the browser is requesting the object /somedir/page.html. The version is self-\nexplanatory; in this example, the browser implements version HTTP/1.1.\n\nThe header line Host: www.someschool.edu specifies the host on which the object resides.\n\nHTTP response message\nstatus line\n(protocol\n\nstatus code BTTE/1.1 200 OK\\r\\n\nstatus phrase) Date: Sun, 26 Sep 2010 20:09:20 GmT\\r\\n\n\nServer: Apache/2.0.52 (CentOs)\\r\\n\nLast-Modified: Tue, 30 Oct 2007 17:00:02\nGMT\\r\\n\nheader ETag: \"17dc6-a5c-b£716880\"\\r\\n\nlines Accept-Ranges: bytes\\r\\n\n\nContent-Length: 2652\\r\\n\n\nKeep-Alive: timeout=10, max=100\\r\\n\n\nConnection: Keep-Alive\\r\\n\n\nContent-Type: text/html; charset=ISO-8859-\n\n1\\r\\n\n\\r\\n\ndata, eg.. data data data data...\nrequested\nHTML file\n\nFig. 6 HTTP request message\nHTTP response message consist three part\n1. Status line 2. Header line 3. Data (Entity body)\nThe status line has three fields: the protocol version field, a status code, and a corresponding\nstatus message.\nIn this example, the status line indicates that the server is using HTTP/1.1 and that everything is\nOK.\nThe Date: header line indicates the time and date when the HTTP response was created and\nsent by the server.\nThe Server: header line indicates that the message was generated by an Apache Web server.\nThe Last-Modified: header line indicates the time and date when the object was created or last\nmodified.\nThe Content-Length: header line indicates the number of bytes in the object being sent.\nThe Content-Type: header line indicates that the object in the entity body is HTML text.\n\nUser-Server Interaction OR Cookies\n\nA small text file created by a Web site that is stored in the user's computer either temporarily\nfor that session only or permanently on the hard disk (persistent cookie).\nCookies provide a way for the Web site to recognize you and keep track of your preferences.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 9\n"
    },
    {
      "page_number": "10",
      "content": "P Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\ne Cookie technology has four components\n1. acookie header line in the HTTP response message\n2. acookie header line in the HTTP request message\n3. acookie file kept on the user’s end system and managed by the user’s browser\n4. a back-end database at the Web site\n\nClient host Server host\n\nws)\nebay: 8734\n\n—— Server creates\nID 1678 for user\nentry in backend\n\nis database\namazon: 1678\nebay: 8734 : access (\n—— Cookie-specific <> agai!\naction\nOne week later\naccess\n\nSe\n\namazon: 1678\nebay: 8734 — Cookie-specific\n\naction\n\nTime Time\n\nFig. 7 keeping user state with cookies\n\ne Suppose Susan, access Amazon.com for the first time.\n\ne Let us suppose that in the past she has already visited the eBay site.\n\ne When the request comes into the Amazon Web server, the server creates a unique identification\nnumber and creates an entry in its back-end database by the identification number.\n\ne The Amazon Web server then responds to Susan’s browser, including in the HTTP response a\nset-cookie: header, which contains the identification number.\n\ne For example, the header line might be Set-cookie: 1678.\n\ne When Susan's browser receives the HTTP response message, it sees the Set-cookie: header.\n\ne The browser then appends a line to the special cookie file that it manages.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 10\n"
    },
    {
      "page_number": "11",
      "content": "| Darsha qn 2 — Application Layer\n\ne This line includes the hostname of the server and the identification number in the Set-cookie:\nheader.\n\ne The cookie file already has an entry for eBay, since Susan has visited that site in the past.\n\ne As Susan continues to browse the Amazon site, each time she requests a Web page, her browser\nconsults her cookie file, extracts her identification number for this site, and puts a cookie header\nline that includes the identification number in the HTTP request.\n\ne Specifically, each of her HTTP requests to the Amazon server includes the header line: Cookie:\n1678.\n\ne Inthis manner, the Amazon server is able to track Susan’s activity at the Amazon site.\n\nUse of cookies\n> authorization > recommendations\n> shopping carts > user session state (Web e-mail)\n\nWeb Caching OR Proxy Server\ne A Web cache OR a proxy server is a network entity that satisfies HTTP requests on the behalf of\nan origin Web server.\ne The Web cache has its own disk storage and keeps copies of recently requested objects in this\n\nstorage.\nProxy\nTe SA se\nClient ew” Origin\nPons AR server\nx .\n2 > rp feq\nws on 4 Les,\ner 2\n<e 5\n* ns.\n\nClient Origin\nserver\nFig. 8 Clients requesting objects through a Web cache\ne A Web cache OR a proxy server is a network entity that satisfies HTTP requests on the behalf of\nan origin Web server.\ne The Web cache has its own disk storage and keeps copies of recently requested objects in this\nstorage.\ne Auser’s browser can be configured so that all of the user’s HTTP requests are first directed to\nthe Web cache.\ne Asan example, suppose a browser is requesting the object\nhttp://www.someschool.edu/campus.gif.\ne Here is what happens\n1. The browser establishes a TCP connection to the Web cache and sends an HTTP request\nfor the object to the Web cache.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 11\n"
    },
    {
      "page_number": "12",
      "content": "D Darshan\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\n2. The Web cache checks to see if it has a copy of the object stored locally. If it does, the\nWeb cache returns the object within an HTTP response message to the client browser.\n\n3. If the Web cache does not have the object, the Web cache opens a TCP connection to the\norigin server, that is, to www.someschool.edu. The Web cache then sends an HTTP\nrequest for the object into the cache-to-server TCP connection. After receiving this\nrequest, the origin server sends the object within an HTTP response to the Web cache.\n\n4. When the Web cache receives the object, it stores a copy in its local storage and sends a\ncopy, within an HTTP response message, to the client browser.\n\ne Note that a cache is both a server and a client at the same time.\n\ne When it receives requests from and sends responses to a browser, it is a server.\n\ne When it sends requests to and receives responses from an origin server, it is a client.\nWhy Web caching is needed (Required)? OR Advantages of Caching\n\n> To reduce response time for a client request\n\n> To reduce traffic on an institution’s access link\n\n> To enable \"poor\" content providers to effectively deliver content\n\nFTP (File Transfer Protocol)\n\ne File Transfer Protocol (FTP) is the commonly used protocol for exchanging files over the Network\nor Internet.\n\ne FTP uses the Internet's TCP/IP protocols to enable data transfer.\ne FTP uses client-server architecture.\n\ne FTP promotes sharing of files via remote computers with reliable and efficient data transfer.\n\nFile transfer\n\nUser\nor host\n\nLocal file Remote file\nsystem system\n\nFig. 9 FTP moves files between local and remote file systems\ne Inthe above figure, a user interacts with FTP through an FTP user agent.\ne The user first provides the hostname of the remote host, causing the FTP client process in the\nlocal host to establish a TCP connection with the FTP server process in the remote host.\ne The user then provides the user identification and password, which are sent over the TCP\nconnection as part of FTP commands.\ne Once the server has authorized the user, the user copies one or more files stored in the local file\nsystem into the remote file system (or vice versa).\ne FTP uses two parallel TCP connections to transfer a file,\n1. control connection\n2. data connection\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 12\n"
    },
    {
      "page_number": "13",
      "content": "D Darshan\n\ntaeitute Of Emgtnearing d Techsiohipy 2 - Application Layer\n\na TCP contro! connection port 21 4\nZ\nI\n\nTCP data connection port 20 3\n\nFIP FTP\nclient server\n\nFig. 10 Control and data connections\nThe control connection is used for sending control information between the two hosts such as\nuser identification, password, commands to change remote directory and commands to put and\nget files.\nThe data connection is used to actually send a file.\nBecause FTP uses a separate control connection, FTP is said to send its control information out-\nof-band.\nWhen a user starts an FTP session with a remote host, the client side of FTP (user) first initiates a\ncontrol TCP connection with the server side (remote host) on server port number 21.\nThe client side of FTP sends the user identification and password over this control connection.\nThe client side of FTP also sends, over the control connection, commands to change the remote\ndirectory.\nWhen the server side receives a command for a file transfer over the control connection (either\nto or from, the remote host), the server side initiates a TCP data connection to the client side.\nFTP sends exactly one file over the data connection and then closes the data connection.\nIf during the same session, the user wants to transfer another file, FTP opens another data\nconnection.\nThus, with FTP, the control connection remains open throughout the duration of the user\nsession, but a new data connection is created for each file transferred within a session (that is,\nthe data connections are non-persistent).\n\nElectronic mail on the Internet (Email)\n\nAs with ordinary postal mail, e-mail is an asynchronous communication medium in which people\nsend and read messages when it is convenient for them, without having to coordinate with\nother people’s schedules.\nIn contrast with postal mail, electronic mail is fast, easy to distribute, and inexpensive.\nModern e-mail has many powerful features, including messages with attachments, hyperlinks,\nHTML-formatted text, and embedded photos.\nEmail has three major components\n\n1. user agents\n\n2. mail servers\n\n3. Simple Mail Transfer Protocol (SMTP)\nUser agents allow users to read, reply to, forward, save, and compose messages.\nMicrosoft Outlook and Apple Mail are examples of user agents for e-mail.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 13\n"
    },
    {
      "page_number": "14",
      "content": "oi Darshan 2 - Application Layer\n\ne OS\n\nKey:\niM sey queue in| User mailbox\n\nFig. 11 A high-level view of the Internet e-mail system\n\nKey:\nESSN DL) Message queue User mailbox\n\nFig. 12 Alice sends a message to Bob\ne In the above figure when Alice is finished composing her message, her user agent sends the\nmessage to her mail server, where the message is placed in the mail server’s outgoing message\nqueue.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 14\n"
    },
    {
      "page_number": "15",
      "content": "“a> Darshan 2 — Application Layer\n\nInstitute of Engineering & Technology\n\ne When Bob wants to read a message, his user agent retrieves the message from his mailbox in his\nmail server.\n\ne Mail servers form the core of the e-mail infrastructure.\n\ne Each recipient, such as Bob, has a mailbox located in one of the mail servers.\n\ne Bob’s mailbox manages and maintains the messages that have been sent to him.\n\ne Atypical message starts its journey in the sender’s user agent, travels to the sender’s mail server\nand travels to the recipient’s mail server, where it is deposited in the recipient’s mailbox.\n\ne When Bob wants to access the messages in his mailbox, the mail server containing his mailbox\nauthenticates Bob (with usernames and passwords).\n\ne Alice’s mail server must also deal with failures in Bob’s mail server.\n\ne If Alice’s server cannot deliver mail to Bob’s server, Alice’s server holds the message in a\nmessage queue and attempts to transfer the message later.\n\ne Reattempts are often done every 30 minutes or so; if there is no success after several days, the\nserver removes the message and notifies the sender (Alice) with an e-mail message.\n\ne =SMTP is the principal application-layer protocol for Internet electronic mail. It uses the reliable\ndata transfer service of TCP to transfer mail from the sender’s mail server to the recipient’s mail\nserver.\n\ne SMTP has two sides: a client side, which executes on the sender’s mail server, and a server side,\nwhich executes on the recipient’s mail server.\n\ne Both the client and server sides of SMTP run on every mail server.\n\ne When a mail server sends mail to other mail servers, it acts as an SMTP client. When a mail\nserver receives mail from other mail servers, it acts as an SMTP server.\n\nSMTP (Simple Mail Transfer Protocol)\n\nSMTP transfers messages from senders’ mail servers to the recipients’ mail servers.\n\ne = It restricts the body (not just the headers) of all mail messages to simple 7-bit ASCII.\n\ne To illustrate the basic operation of SMTP, let’s take a common scenario. Suppose Alice wants to\nsend Bob a simple ASCII message.\n\nAlice’s\nKo server\n\n5 300\n\nge queue User mailbox\n\nFig. 13 Alice sends a message to Bob\n1. Alice invokes her user agent for e-mail, provides Bob’s e-mail address (for example,\nbob@someschool.edu), composes a message and instructs the user agent to send the\nmessage.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 15\n"
    },
    {
      "page_number": "16",
      "content": "D Darshan\n\ntaeitute Of Emgtnearing d Techsiohipy 2 - Application Layer\n\n2. Alice’s user agent sends the message to her mail server, where it is placed in a message\nqueue.\n\n3. The client side of SMTP, running on Alice’s mail server, sees the message in the message\nqueue. It opens a TCP connection to an SMTP server, running on Bob’s mail server.\n\n4. After some initial SMTP handshaking, the SMTP client sends Alice’s message into the TCP\nconnection.\n\n5. At Bob’s mail server, the server side of SMTP receives the message. Bob’s mail server then\nplaces the message in Bob’s mailbox.\n\n6. Bob invokes his user agent to read the message at his convenience.\n\nSMTP does not normally use intermediate mail servers for sending mail, even when the two mail\n\nservers are located at opposite ends of the world.\n\nIf Bob’s mail server is down, the message remains in Alice’s mail server and waits for a new\n\nattempt and the message does not get placed in some intermediate mail server.\n\nHow SMTP transfers a message from a sending mail server to a receiving mail\nserver\n\nFirst, the client SMTP (running on the sending mail server host) has TCP establish a connection\nto port 25 at the server SMTP (running on the receiving mail server host).\n\nIf the server is down, the client tries again later.\n\nOnce this connection is established, the server and client perform some application-layer\nhandshaking, just as humans often introduce themselves before transferring information from\none to another.\n\nDuring this SMTP handshaking phase, the SMTP client indicates the e-mail address of the sender\n(the person who generated the message) and the e-mail address of the recipient.\n\nOnce the SMTP client and server have introduced themselves to each other, the client sends the\nmessage.\n\nSMTP can count on the reliable data transfer service of TCP to get the message to the server\nwithout errors.\n\nThe client then repeats this process over the same TCP connection if it has other messages to\nsend to the server; otherwise, it instructs TCP to close the connection.\n\nComparison of SMTP with HTTP\n\nHTTP is mainly a pull protocol-someone loads information on a web server and users use HTTP\nto pull the information from the server. On the other hand, SMTP is primarily a push protocol-\nthe sending mail server pushes the file to receive mail server.\n\nSMTP requires each message, including the body of each message, to be in seven-bit ASCII\nformat. If the message contains binary data, then the message has to be encoded into seven-bit\nASCII format. HTTP does not have this restriction.\n\nHTTP encapsulate each object of a message in its own response message while SMTP places all\nof the message's objects into one message.\n\nMail Access Protocols (POP3 and IMAP)\nPOP3 (Post Office Protocol)\n\nPOP3 is an extremely simple mail access protocol.\nPOP3 begins when the user agent of the client opens a TCP connection to the mail server of the\nserver on port 110.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 16\n"
    },
    {
      "page_number": "17",
      "content": "D Darshan\n\ntaeitute Of Emgtnearing d Techsiohipy 2 - Application Layer\n\nWith the TCP connection established, POP3 progresses through three phases: authorization,\ntransaction, and update.\n\nDuring the first phase, authorization, the user agent sends a username and a password to\nauthenticate the user.\n\nDuring the second phase, transaction, the user agent retrieves messages; also during this phase,\nthe user agent can mark messages for deletion, remove deletion marks and obtain mail\nstatistics.\n\nThe third phase, update, occurs after the client has issued the quit command, ending the POP3\nsession; at this time, the mail server deletes the messages that were marked for deletion.\n\nPOP3 is designed to delete mail on the server as soon as the user has downloaded it.\n\nHowever, some implementations allow users or an administrator to specify that mail is saved for\nsome period of time. POP can be thought of as a \"store-and-forward\" service.\n\nIMAP (Internet Message Access Protocol)\n\nWith POP3 access, once a receiver has downloaded his messages to the local machine, he can\ncreate mail folders and move the downloaded messages into the folders.\n\nA receiver can then delete messages, move messages across folders, and search for messages\n(by sender name or subject).\n\nBut this paradigm—namely, folders and messages in the local machine—poses a problem for\nthe roaming user, who would prefer to maintain a folder hierarchy on a remote server that can\nbe accessed from any computer.\n\nThis is not possible with POP3—the POP3 protocol does not provide any means for a user to\ncreate remote folders and assign messages to folders.\n\nAn IMAP server will associate each message with a folder; when a message first arrives at the\nserver, it is associated with the recipient’s INBOX folder.\n\nThe recipient can then move the message into a new, user-created folder, read the message,\ndelete the message, and so on.\n\nThe IMAP protocol provides commands to allow users to create folders and move messages\nfrom one folder to another.\n\nIMAP also provides commands that allow users to search remote folders for messages matching\nspecific criteria.\n\nAnother important feature of IMAP is that it has commands that permit a user agent to obtain\ncomponents of messages. For example, a user agent can obtain just the message header of a\nmessage or just one part of a multipart MIME message.\n\nThis feature is useful when there is a low-bandwidth connection (for example, a slow-speed\nmodem link) between the user agent and its mail server.\n\nWith a low bandwidth connection, the user may not want to download all of the messages in its\nmailbox, particularly avoiding long messages that might contain, for example, an audio or video\nclip.\n\nDNS (Domain Name System)\n\nDNS (Domain Name System) is an internet service that translates domain names into IP\naddresses.\n\nBecause domain names are alphabetic, they're easier to remember for a human being but The\nInternet is really based on IP addresses.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 17\n"
    },
    {
      "page_number": "18",
      "content": "“a> Darshan 2 — Application Layer\n\nInstitute of Engineering & Technology\n\ne Every time you use a domain name, therefore, a DNS service must translate the domain name\ninto the corresponding IP address. For example, the domain name www.google.com might\ntranslate to 198.105.232.4.\n\ne The DNS system is, in fact, its own network. If one DNS server doesn't know how to translate a\nparticular domain name, it asks another one, and so on, until the correct IP address is returned.\n\nDistributed database design is more preferred over a centralized design to\nimplement DNS in the Internet\n\n1. A single point of failure: If the DNS server crashes then the entire Internet will not stop.\n\n2. Traffic volume: Today the Internet is so huge, with millions of device and users accessing\nits services from all over the globe at the same time. A Single DNS Server cannot handle\nthe huge global DNS traffic but with a distributed system, this traffic is distributed and\nreduce overload on the server.\n\n3. Distant centralized database: A single DNS server cannot be “close to” all the querying\nclients. If we put the single DNS server in New York City, then all queries from Australia\nmust travel to the other side of the globe, perhaps over slow and congested links. This\ncan lead to significant delays.\n\n4. Maintenance: The single DNS server would have to keep records for all Internet hosts.\nNot only would this centralized database be huge, but it would have to be updated\nfrequently to account for every new host.\n\nA Distributed, Hierarchical Database\n\nRoot DNS servers\ncom DNS servers org DNS servers edu DNS servers\nyahoo.com amazon.com pbs.org poly.edu umass.edu\nDNS servers DNS servers DNS servers DNS servers DNS servers\n\nFig. 14 Portion of the hierarchy of DNS servers\ne suppose a DNS client wants to determine the IP address for the hostname www.amazon.com:\n\n1. The client first contacts one of the root servers, which returns IP addresses for TLD servers\nfor the top-level domain com.\n\n2.The client then contacts one of these TLD servers, which returns the IP address of an\nauthoritative server for amazon.com.\n\n3. Finally, the client contacts one of the authoritative servers for amazon.com, which returns\nthe IP address for the hostname www.amazon.com.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 18\n"
    },
    {
      "page_number": "19",
      "content": "an\n\nsasesinc OF ergntarng a Teasley 2 — Application Layer\n\nRecursive queries and iterative queries\n\nRoot DNS server\n\na\na\n\nLocal DNS server TLD DNS server\ndns .poly.edu\n\niz\n\nAuthoritative DNS server\n\nss dns.umass.edu\nRequesting host\ncis.poly.edu\n\ngaia.cs.umass.edu\n\nFig. 15 Interaction of the various DNS servers\ne The example shown in the above figure makes use of both recursive queries and iterative\nqueries.\ne The query 1 sent from cis.poly.edu to dns.poly.edu is a recursive query because the query asks\ndns.poly.edu to obtain the mapping on its behalf.\n\ne But the subsequent three queries 2, 4 and 6 are iterative since all of the replies are directly\nreturned to dns.poly.edu.\n\nFiroz A. Sherasiya, CE Department | 2140709 — Computer Networks (CN) 19\n"
    }
  ]
}